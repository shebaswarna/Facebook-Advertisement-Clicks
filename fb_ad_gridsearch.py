# -*- coding: utf-8 -*-
"""Fb_Ad_Gridsearch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-uIL_b_Pbni6GgsIDSM72lYw5ESau4lg

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd 
import seaborn as sns

"""## Importing the dataset"""

dataset = pd.read_csv('Facebook_Ads_2.csv',encoding='ISO-8859-1')

dataset.head()

"""# Visualization of dataset"""

clicked = dataset[dataset['Clicked']==1]
not_clicked = dataset[dataset['Clicked']==0]

print("Total =", len(dataset))

print("Number of customers who clicked on Ad =", len(clicked))
print("Percentage Clicked =", 1.*len(clicked)/len(dataset)*100.0, "%")
 
print("Did not Click =", len(not_clicked))
print("Percentage who did not Click =", 1.*len(not_clicked)/len(dataset)*100.0, "%")

labels = 'Clicked', 'Not_Clicked'
sizes = [len(clicked), len(not_clicked)]

fig1, ax1 = plt.subplots()
ax1.pie(sizes, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90, )
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.'''
plt.rcParams['figure.figsize'] = [10,10]
plt.show()

sns.scatterplot(dataset['Time Spent on Site'], dataset['Salary'], hue = dataset['Clicked'])
plt.rcParams['figure.figsize'] = [5,5]

sns.jointplot(x= dataset['Time Spent on Site'], y=dataset['Salary'], kind='scatter', hue = dataset['Clicked'])

plt.figure(figsize= (5,5))
sns.boxplot(x= 'Clicked', y= 'Salary', data = dataset)

plt.figure(figsize= (5,5))
sns.boxplot(x= 'Clicked', y= 'Time Spent on Site', data = dataset)

dataset['Salary'].hist(bins = 20)
plt.rcParams['figure.figsize'] = [10,10]
plt.xlabel('Salary')
plt.ylabel('No. of Customers')

dataset['Time Spent on Site'].hist(bins = 20)
plt.rcParams['figure.figsize'] = [5,5]
plt.xlabel('Time Spent on Site')
plt.ylabel('No. of Customers')

"""# Cleaning the Data"""

dataset.head()

dataset.drop(['Names', 'emails', 'Country'], axis = 1, inplace = True)

dataset.head()

X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""## Training the Kernel SVM model on the Training set"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf', random_state = 0)
classifier.fit(X_train, y_train)

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
y_pred = classifier.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

sns.heatmap(cm, annot= True, fmt = 'd')
plt.rcParams['figure.figsize'] = [5,5]
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')

"""## Applying k-Fold Cross Validation"""

from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)
print("Accuracy: {:.2f} %".format(accuracies.mean()*100))
print("Standard Deviation: {:.2f} %".format(accuracies.std()*100))

"""## Applying Grid Search to find the best model and the best parameters"""

from sklearn.model_selection import GridSearchCV
parameters = [{'C': [0.25, 0.5, 0.75, 1], 'kernel': ['linear']},
              {'C': [0.25, 0.5, 0.75, 1], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]
grid_search = GridSearchCV(estimator = classifier,
                           param_grid = parameters,
                           scoring = 'accuracy',
                           cv = 10,
                           n_jobs = -1)
grid_search.fit(X_train, y_train)
best_accuracy = grid_search.best_score_
best_parameters = grid_search.best_params_
print("Best Accuracy: {:.2f} %".format(best_accuracy*100))
print("Best Parameters:", best_parameters)

"""## Visualising the Training set results"""

from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Kernel SVM (Training set)')
plt.xlabel('Time Spent on site')
plt.ylabel('Salary')
plt.legend()
plt.show()

"""## Visualising the Test set results"""

from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Kernel SVM (Test set)')
plt.xlabel('Time Spent on site')
plt.ylabel('Salary')
plt.legend()
plt.show()